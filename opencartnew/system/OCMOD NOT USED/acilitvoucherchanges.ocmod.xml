<?xml version="1.0" encoding="utf-8"?>
<modification>
	<name>
		Change Phone To Unique
	</name>
	<code>
		change_phone_to_unique
	</code>
	<version>
		1.0
	</version>
	<author>
		MICES Technology Sdn Bhd
	</author>
	<link>
		https://www.mices.com.my
	</link>
	<file path="catalog/view/theme/journal3/template/account/account.twig">
		<!-- TELEPHONE -->
		<operation>
			<search>
				<![CDATA[<li class="edit-recurring">]]>
			</search>
			<add position="before">
				<![CDATA[
				<li	class="edit-points">
				<a	href="{{ point }}">
				{{ text_point }}
				</a>
				</li>
				<li	class="edit-vouchers">
				<a	href="{{ voucher }}">
				{{ text_my_coupon }}
				</a>
				</li>
				]]>
			</add>
		</operation>
	</file>
	<file path="catalog/controller/account/account.php">
		<operation>
			<search>
				<![CDATA[$data['recurring'] = $this->url->link('account/recurring', '', true);]]>
			</search>
			<add position="before">
				<![CDATA[
				$data['point'] = $this->url->link('account/point', '', true);
				$data['voucher'] = $this->url->link('account/coupon', '', true);
				]]>
			</add>
		</operation>
	</file>
	<file path="catalog/language/en-gb/account/account.php">
		<operation>
			<search>
				<![CDATA[$_['text_tracking']       = 'Custom Affiliate Tracking Code';]]>
			</search>
			<add position="before">
				<![CDATA[
				$_['text_voucher']       = 'Vouchers';
				$_['text_point']       = 'Points';
				]]>
			</add>
		</operation>
	</file>
	<file path="catalog/model/journal3/filter.php">
		<operation>
			<search>
				<![CDATA[public function getProductIds($filter_data = null) {]]>
			</search>
			<add position="before">
				<![CDATA[
				public function getVoucherProductIds($filter_data = null)
				{
				if ($filter_data === null) {
				$filter_data = static::$filter_data;
				}
				
				if (Arr::get($filter_data, 'sort') === 'ps.price') {
				$filter_data['sort'] = 'p.price';
				} else if (!in_array(Arr::get($filter_data, 'sort'), self::$SORT)) {
				$filter_data['sort'] = self::$SORT[0];
				}
				
				if (!in_array(Arr::get($filter_data, 'order'), self::$ORDER)) {
				$filter_data['order'] = self::$ORDER[0];
				}
				
				$sql = "
				SELECT
				p.product_id, p.voucher_id,
				(
				SELECT AVG(rating) total
				FROM `" . DB_PREFIX . "review` r1
				WHERE
				r1.product_id = p.product_id
				AND r1.status = '1'
				GROUP BY r1.product_id
				) rating,
				(
				SELECT price
				FROM `" . DB_PREFIX . "product_discount` pd2
				WHERE
				pd2.product_id = p.product_id
				AND pd2.customer_group_id = '" . (int)$this->config_customer_group_id . "'
				AND pd2.quantity = '1'
				AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW())
				AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW()))
				ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1
				) discount,
				(
				SELECT price
				FROM `" . DB_PREFIX . "product_special` ps
				WHERE
				ps.product_id = p.product_id
				AND ps.customer_group_id = '" . (int)$this->config_customer_group_id . "'
				AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW())
				AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW()))
				ORDER BY ps.priority ASC, ps.price ASC LIMIT 1
				) special,
				p.viewed
				";
				
				if (Arr::get($filter_data, 'sort') === 'sales') {
				$sql .= "
				, SUM(op.quantity) AS sales
				FROM `" . DB_PREFIX . "order_product` op
				LEFT JOIN `" . DB_PREFIX . "order` o ON (o.order_id = op.order_id)
				LEFT JOIN `" . DB_PREFIX . "product` p ON (p.product_id = op.product_id)
				";
				} else {
				$sql .= " FROM `" . DB_PREFIX . "product` p";
				}
				
				$sql .= $this->addFilters($filter_data);
				
				if (Arr::get($filter_data, 'bestseller')) {
				$sql .= " AND o.order_status_id > '0'";
				}
				
				$sql .= " AND p.voucher_id IS NOT NULL AND p.is_voucher = '1'";
				$sql .= " GROUP BY p.product_id";
				
				if ($filter_data['sort'] === 'random') {
				$sql .= " ORDER BY RAND()";
				} else {
				if ($filter_data['sort'] === 'pd.name' || $filter_data['sort'] === 'p.model') {
				$sql .= " ORDER BY LCASE(" . $filter_data['sort'] . ")";
				} elseif ($filter_data['sort'] === 'p.price') {
				$sql .= " ORDER BY (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";
				} else {
				$sql .= " ORDER BY " . $filter_data['sort'];
				}
				
				if ($filter_data['order'] === 'DESC') {
				$sql .= " DESC, LCASE(pd.name) DESC";
				} else {
				$sql .= " ASC, LCASE(pd.name) ASC";
				}
				}
				
				$start = (int)Arr::get($filter_data, 'start', 0);
				$limit = (int)Arr::get($filter_data, 'limit', 0);
				
				if ($limit) {
				// $sql .= " LIMIT {$this->dbEscapeNat($start)}, {$this->dbEscapeNat($limit)}";
				}
				
				// dd($sql);
				
				return $this->dbQuery($sql, 'PRODUCTS')->rows;
				}
				
				
				public function getVoucherProducts($filter_data = null)
				{
				$products = $this->getVoucherProductIds($filter_data);
				
				$product_ids = array();
				
				
				
				foreach ($products as $product) {
				
				if ($product['voucher_id'] != '' && $product['voucher_id'] != NULL) {
				$product_ids[$product['product_id']] = (int)$product['product_id'];
				}
				}
				
				
				return $this->model_journal3_product->getVoucherInProduct($product_ids);
				}
				]]>
			</add>
		</operation>
	</file>
	<file path="catalog/model/journal3/product.php">
		<operation>
			<search>
				<![CDATA[public function getProduct(]]>
			</search>
			<add position="before">
				<![CDATA[
				public function getVoucherInProduct($product_id)
				{
				$product_ids = $this->getProductIds($product_id);
				
				// dd($product_ids);
				
				if (!$product_ids) {
				return array();
				}
				
				// $query = $this->db->query("SELECT DISTINCT *, pd.name AS name, p.image, m.name AS manufacturer, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, (SELECT points FROM " . DB_PREFIX . "product_reward pr WHERE pr.product_id = p.product_id AND pr.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' LIMIT 1) AS reward, (SELECT ss.name FROM " . DB_PREFIX . "stock_status ss WHERE ss.stock_status_id = p.stock_status_id AND ss.language_id = '" . (int)$this->config->get('config_language_id') . "') AS stock_status, (SELECT wcd.unit FROM " . DB_PREFIX . "weight_class_description wcd WHERE p.weight_class_id = wcd.weight_class_id AND wcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS weight_class, (SELECT lcd.unit FROM " . DB_PREFIX . "length_class_description lcd WHERE p.length_class_id = lcd.length_class_id AND lcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS length_class, (SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "review r2 WHERE r2.product_id = p.product_id AND r2.status = '1' GROUP BY r2.product_id) AS reviews, p.sort_order FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) LEFT JOIN " . DB_PREFIX . "manufacturer m ON (p.manufacturer_id = m.manufacturer_id) WHERE p.is_voucher = 1 AND p.product_id IN (" . implode(',', $product_ids) . ") AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");
				$query = $this->db->query("SELECT DISTINCT *, pd.name AS name,p.pointRedeem AS pointRedeem, p.image, m.name AS manufacturer, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, (SELECT points FROM " . DB_PREFIX . "product_reward pr WHERE pr.product_id = p.product_id AND pr.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' LIMIT 1) AS reward, (SELECT ss.name FROM " . DB_PREFIX . "stock_status ss WHERE ss.stock_status_id = p.stock_status_id AND ss.language_id = '" . (int)$this->config->get('config_language_id') . "') AS stock_status, (SELECT wcd.unit FROM " . DB_PREFIX . "weight_class_description wcd WHERE p.weight_class_id = wcd.weight_class_id AND wcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS weight_class, (SELECT lcd.unit FROM " . DB_PREFIX . "length_class_description lcd WHERE p.length_class_id = lcd.length_class_id AND lcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS length_class, (SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "review r2 WHERE r2.product_id = p.product_id AND r2.status = '1' GROUP BY r2.product_id) AS reviews, p.sort_order, p.voucher_id FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) LEFT JOIN " . DB_PREFIX . "manufacturer m ON (p.manufacturer_id = m.manufacturer_id) WHERE p.product_id IN (" . implode(',', $product_ids) . ") AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");
				
				// dd($query->rows);
				
				$result = array_flip($product_ids);
				
				foreach ($query->rows as $row) {
				
				if ($row['voucher_id'] != null) {
				
				
				$result[$row['product_id']] = array(
				'product_id'       => $row['product_id'],
				'voucher_id'       => $row['voucher_id'],
				'pointRedeem'       => $row['pointRedeem'] ,
				'name'             => $row['name'],
				'description'      => $row['description'],
				'meta_title'       => $row['meta_title'],
				'meta_description' => $row['meta_description'],
				'meta_keyword'     => $row['meta_keyword'],
				'tag'              => $row['tag'],
				'model'            => $row['model'],
				'sku'              => $row['sku'],
				'upc'              => $row['upc'],
				'ean'              => $row['ean'],
				'jan'              => $row['jan'],
				'isbn'             => $row['isbn'],
				'mpn'              => $row['mpn'],
				'location'         => $row['location'],
				'quantity'         => $row['quantity'],
				'stock_status'     => $row['stock_status'],
				'image'            => $row['image'],
				'manufacturer_id'  => $row['manufacturer_id'],
				'manufacturer'     => $row['manufacturer'],
				'price'            => ($row['discount'] ? $row['discount'] : $row['price']),
				'special'          => $row['special'],
				'reward'           => $row['reward'],
				'points'           => $row['points'],
				'tax_class_id'     => $row['tax_class_id'],
				'date_available'   => $row['date_available'],
				'weight'           => $row['weight'],
				'weight_class_id'  => $row['weight_class_id'],
				'length'           => $row['length'],
				'width'            => $row['width'],
				'height'           => $row['height'],
				'length_class_id'  => $row['length_class_id'],
				'subtract'         => $row['subtract'],
				'rating'           => round($row['rating']),
				'reviews'          => $row['reviews'] ? $row['reviews'] : 0,
				'minimum'          => $row['minimum'],
				'sort_order'       => $row['sort_order'],
				'status'           => $row['status'],
				'date_added'       => $row['date_added'],
				'date_modified'    => $row['date_modified'],
				'viewed'           => $row['viewed'],
				);
				}
				}
				
				if (count($result) !== $query->num_rows) {
				$result = array_filter($result, function ($res) {
				return isset($res['product_id']) && $res['product_id'];
				});
				}
				// dd($result);
				
				
				return $result;
				}
				]]>
			</add>
		</operation>
	</file>
	<!-- common left side bar update -->
	<file path="admin/controller/common/column_left.php">
		<operation>
			<search>
				<![CDATA[$this->user->hasPermission('access', 'catalog/recurring']]>
			</search>
			<add position="before">
				<![CDATA[
				if ($this->user->hasPermission('access', 'catalog/product')) {
				$catalog[] = array(
				'name'	   => $this->language->get('text_bar_voucher'),
				'href'     => $this->url->link('catalog/product', 'user_token=' . $this->session->data['user_token'] . '&is_voucher=1', true),
				'children' => array()
				);
				}
				]]>
			</add>
		</operation>
	</file>
	<file path="admin/language/en-gb/common/column_left.php">
		<operation>
			<search>
				<![CDATA[$_['text_api']                  = 'API';]]>
			</search>
			<add position="before">
				<![CDATA[$_['text_bar_voucher']                  = 'Vouchers';]]>
			</add>
		</operation>
	</file>
	<!-- VOUCHER PRODUCT PAGE -->
	<file path="admin/controller/catalog/product.php">
		<operation>
			<search>
				<![CDATA[$this->document->setTitle($this->language->get('heading_title'));]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->document->setTitle($this->language->get('voucher_heading_title'));
				}else{
				$this->document->setTitle($this->language->get('heading_title'));
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA['text' => $this->language->get('heading_title'),]]>
			</search>
			<add position="replace">
				<![CDATA[ 'text' =>isset( $this->request->get['is_voucher']) ? $this->language->get('voucher_heading_title') : $this->language->get('heading_title'),]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$results = $this->model_catalog_product->getProducts($filter_data);]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher'])){
				$results = $this->model_catalog_product->getVouchersInProduct($filter_data);
				}else{
				$results = $this->model_catalog_product->getProducts($filter_data);
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$url = '';]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$url = '&is_voucher=1';
				}else{
				$url = '';
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$data['add'] = $this->url->link('catalog/product/add', 'user_token=' . $this->session->data['user_token'] . $url, true);]]>
			</search>
			<add position="after">
				<![CDATA[ $data['is_voucher'] = isset($this->request->get['is_voucher']) ? $this->request->get['is_voucher'] : 0; ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$product_total = $this->model_catalog_product->getTotalProducts($filter_data);]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$product_total = $this->model_catalog_product->getTotalVoucherProducts($filter_data);
				}else{
				$product_total = $this->model_catalog_product->getTotalProducts($filter_data);
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$this->response->setOutput($this->load->view('catalog/product_form', $data));]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->response->setOutput($this->load->view('catalog/voucher_form', $data));
				}else{
				$this->response->setOutput($this->load->view('catalog/product_form', $data));
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);
				}else{
				$this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$this->session->data['success'] = $this->language->get('text_success');]]>
			</search>
			<add position="replace">
				<![CDATA[ $this->session->data['success'] = isset($this->request->get['is_voucher']) ?  $this->language->get('text_voucher_success') : $this->language->get('text_success'); ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA['href' => $this->url->link('catalog/product', 'user_token=' . $this->session->data['user_token'] . $url, true)]]>
			</search>
			<add position="replace">
				<![CDATA[ 'href' => $this->url->link(isset($this->request->get['is_voucher']) ? 'catalog/productVoucher' : 'catalog/product', 'user_token=' . $this->session->data['user_token'] . $url, true) ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[foreach ($this->request->post['product_description'] as $language_id => $value) {]]>
			</search>
			<add position="before">
				<![CDATA[ if(!isset($this->request->get['is_voucher'])){ ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$this->error['meta_title'][$language_id] = $this->language->get('error_meta_title')]]>
			</search>
			<add position="after">
				<![CDATA[ } ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[if ($this->request->post['product_seo_url']) {]]>
			</search>
			<add position="replace">
				<![CDATA[if (isset($this->request->post['product_seo_url'])) {]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$this->load->model('catalog/download');]]>
			</search>
			<add position="before" offset="2">
				<![CDATA[
				// Coupons

				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->load->model('marketing/coupon');

				if (isset($this->request->get['product_id'])) {
					$coupon = $this->model_marketing_coupon->getCouponByMapping($this->request->get['product_id']);
					if($coupon){
						$data['voucher_id'] = $coupon['voucher_id'];
		
						$data['voucher_name'] = $coupon['name'] . ' ' . $coupon['voucher_id']  . ' ' . '(' . $coupon['discount']  . ')';
		
						$data['discount'] = $coupon['discount'];
					}
				}

				
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[public function autocomplete() {]]>
			</search>
			<add position="before">
				<![CDATA[
				public function autocompleteVoucherMapping() {
				$json = array();
				
				if (isset($this->request->get['filter_name'])) {
				$this->load->model('marketing/coupon');
				$this->load->model('catalog/product');
				
				$filter_data = array(
				'filter_name' => $this->request->get['filter_name'],
				'sort'        => 'name',
				'order'       => 'ASC',
				'start'       => 0,
				'limit'       => 5
				);
				
				$results = $this->model_marketing_coupon->getCouponSearch($filter_data);

				foreach ($results as $result) {
	
				$quantity = $this->model_marketing_coupon->getVoucherQuantity($result['voucher_id']);

				$json[] = array(
					'voucher_id' => $result['voucher_id'],
					'discount' => $result['discount'],
					'discount_type' => $result['type'],
					'quantity' => $quantity,
					'name'        => strip_tags(html_entity_decode($result['name'], ENT_QUOTES, 'UTF-8')) . ' ' . $result['voucher_id']  . ' ' . '(' . $result['discount']  . ')',

				);
			}
				}
				
				$sort_order = array();
				
				foreach ($json as $key => $value) {
				$sort_order[$key] = $value['name'];
				}
				
				array_multisort($sort_order, SORT_ASC, $json);
				
				$this->response->addHeader('Content-Type: application/json');
				$this->response->setOutput(json_encode($json));
				}
				]]>
			</add>
		</operation>
	</file>
	<file path="admin/model/catalog/product.php">
		<operation>
			<search>
				<![CDATA[public function getProducts($data = array()) {]]>
			</search>
			<add position="before">
				<![CDATA[
				public function getVouchersInProduct($data = array()) {
				$sql = "SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.is_voucher = 1 AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'";
				
				if (!empty($data['filter_name'])) {
				$sql .= " AND pd.name LIKE '" . $this->db->escape($data['filter_name']) . "%'";
				}
				
				if (!empty($data['filter_model'])) {
				$sql .= " AND p.model LIKE '" . $this->db->escape($data['filter_model']) . "%'";
				}
				
				if (!empty($data['filter_price'])) {
				$sql .= " AND p.price LIKE '" . $this->db->escape($data['filter_price']) . "%'";
				}
				
				if (isset($data['filter_quantity']) && $data['filter_quantity'] !== '') {
				$sql .= " AND p.quantity = '" . (int)$data['filter_quantity'] . "'";
				}
				
				if (isset($data['filter_status']) && $data['filter_status'] !== '') {
				$sql .= " AND p.status = '" . (int)$data['filter_status'] . "'";
				}
				
				$sql .= " GROUP BY p.product_id";
				
				$sort_data = array(
				'pd.name',
				'p.model',
				'p.price',
				'p.quantity',
				'p.status',
				'p.sort_order',
				'p.voucher_id',
				'p.pointRedeem',
				'p.category',
				);
				
				if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
				$sql .= " ORDER BY " . $data['sort'];
				} else {
				$sql .= " ORDER BY pd.name";
				}
				
				if (isset($data['order']) && ($data['order'] == 'DESC')) {
				$sql .= " DESC";
				} else {
				$sql .= " ASC";
				}
				
				if (isset($data['start']) || isset($data['limit'])) {
				if ($data['start'] < 0) {
				$data['start'] = 0;
				}
				
				if ($data['limit'] < 1) {
				$data['limit'] = 20;
				}
				
				$sql .= " LIMIT " . (int)$data['start'] . "," . (int)$data['limit'];
				}
				
				$query = $this->db->query($sql);
				
				return $query->rows;
				}
				
				
				public function getTotalVoucherProducts($data = array()) {
				$sql = "SELECT COUNT(DISTINCT p.product_id) AS total FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id)";
				
				$sql .= " WHERE p.is_voucher = 1 AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'";
				
				if (!empty($data['filter_name'])) {
				$sql .= " AND pd.name LIKE '" . $this->db->escape($data['filter_name']) . "%'";
				}
				
				if (!empty($data['filter_model'])) {
				$sql .= " AND p.model LIKE '" . $this->db->escape($data['filter_model']) . "%'";
				}
				
				if (isset($data['filter_voucher_id']) && !is_null($data['filter_voucher_id'])) {
				$sql .= " AND p.voucher_id = '" . $this->db->escape($data['filtefilter_voucher_idr_price']) . "%'";
				}

				if (isset($data['filter_price']) && !is_null($data['filter_price'])) {
				$sql .= " AND p.price LIKE '" . $this->db->escape($data['filter_price']) . "%'";
				}
				
				if (isset($data['filter_quantity']) && $data['filter_quantity'] !== '') {
				$sql .= " AND p.quantity = '" . (int)$data['filter_quantity'] . "'";
				}
				
				if (isset($data['filter_status']) && $data['filter_status'] !== '') {
				$sql .= " AND p.status = '" . (int)$data['filter_status'] . "'";
				}
				
				$query = $this->db->query($sql);
				
				return $query->row['total'];
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[		$sql = "SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "'"; ]]>
			</search>
			<add position="replace">
				<![CDATA[ $sql = "SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.is_voucher != 1 AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'"; ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[		$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . (int)$data['tax_class_id'] . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW(), acilit_item_id = '".$data['acilit_item_id']."' WHERE product_id = '" . (int)$product_id . "'"); ]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){

				if(isset($data['product_voucher_mapping'])){
						$this->db->query("UPDATE " . DB_PREFIX . "coupon SET mapping = '". $this->db->escape($product_id)."' WHERE voucher_id = '". $this->db->escape($data['product_voucher_mapping']). "'");
						$this->db->query("UPDATE "  . DB_PREFIX . "product SET voucher_id = '". $this->db->escape($data['product_voucher_mapping'])."' WHERE product_id = '". $product_id. "'");
				}
				$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', quantity = '" . (int)$data['quantity'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', status = '" . (int)$data['status'] . "',date_modified = NOW() WHERE is_voucher = 1 AND product_id = '" . (int)$product_id . "'");
				
				
				}else{
				$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . (int)$data['tax_class_id'] . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[		$this->db->query("INSERT INTO " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . (int)$data['tax_class_id'] . "', sort_order = '" . (int)$data['sort_order'] . "', date_added = NOW(), acilit_item_id = '', date_modified = NOW()"); ]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->db->query("INSERT INTO " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', quantity = '" . (int)$data['quantity'] . "', price = '" . (float)$data['price'] . "', status = '" . (int)$data['status'] . "',date_modified = NOW(), date_added = NOW(), is_voucher = 1");
				}else{
				$this->db->query("INSERT INTO " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . (int)$data['tax_class_id'] . "', sort_order = '" . (int)$data['sort_order'] . "', date_added = NOW(), date_modified = NOW()");
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[$product_id = $this->db->getLastId();]]>
			</search>
			<add position="after">
				<![CDATA[
				if(isset($data['product_voucher_mapping']) && isset($this->request->get['is_voucher'])  && $this->request->get['is_voucher'] == 1){
						$this->db->query("UPDATE "  . DB_PREFIX . "coupon SET mapping = '". $this->db->escape($product_id)."' WHERE voucher_id = '". $this->db->escape($data['product_voucher_mapping']). "'");
						$this->db->query("UPDATE "  . DB_PREFIX . "product SET voucher_id = '". $this->db->escape($data['product_voucher_mapping'])."' WHERE product_id = '". $product_id. "'");
				}				
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[			$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "', tag = '" . $this->db->escape($value['tag']) . "', meta_title = '" . $this->db->escape($value['meta_title']) . "', meta_description = '" . $this->db->escape($value['meta_description']) . "', meta_keyword = '" . $this->db->escape($value['meta_keyword']) . "'"); ]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "'");
				}else{
				$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "', tag = '" . $this->db->escape($value['tag']) . "', meta_title = '" . $this->db->escape($value['meta_title']) . "', meta_description = '" . $this->db->escape($value['meta_description']) . "', meta_keyword = '" . $this->db->escape($value['meta_keyword']) . "'");
				}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[		$sql .= " WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "'"; ]]>
			</search>
			<add position="replace">
				<![CDATA[ $sql .= " WHERE p.is_voucher != 1 AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'"; ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[			$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "', tag = '" . $this->db->escape($value['tag']) . "', meta_title = '" . $this->db->escape($value['meta_title']) . "', meta_description = '" . $this->db->escape($value['meta_description']) . "', meta_keyword = '" . $this->db->escape($value['meta_keyword']) . "'"); ]]>
			</search>
			<add position="replace">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1){
				$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "'");
				}else{
				$this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int)$product_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "', tag = '" . $this->db->escape($value['tag']) . "', meta_title = '" . $this->db->escape($value['meta_title']) . "', meta_description = '" . $this->db->escape($value['meta_description']) . "', meta_keyword = '" . $this->db->escape($value['meta_keyword']) . "'");
				}
				]]>
			</add>
		</operation>
		
		<operation>
			<search>
				<![CDATA[if (!empty($data['product_attribute'])) {]]>
			</search>
			<add position="before">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "product_to_store SET product_id = '" . (int)$product_id . "', store_id = '0'");
				}
				]]>
			</add>
		</operation>
		<operation>
			<search index="0">
				<![CDATA[if (isset($data['product_reward'])) {]]>
			</search>
			<add position="before">
				<![CDATA[
				if(isset($this->request->get['is_voucher']) && $this->request->get['is_voucher'] == 1) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "product_to_store SET product_id = '" . (int)$product_id . "', store_id = '0'");
				}
				]]>
			</add>
		</operation>
	</file>
	<file path="admin/view/template/catalog/product_list.twig">
		<operation>
			<search>
				<![CDATA[<h1>{{ heading_title }}</h1>]]>
			</search>
			<add position="replace">
				<![CDATA[
				{% if is_voucher == 1 %}
				<h1>{{ voucher_heading_title }}</h1>
				{% else %}
				<h1>{{ heading_title }}</h1>
				{% endif %}
				]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[{{ text_list }}]]>
			</search>
			<add position="replace">
				<![CDATA[{{ is_voucher == 1 ? voucher_text_list : text_list }} ]]>
			</add>
		</operation>
		<operation>
			<search>
				<![CDATA[url += '&filter_status=' + encodeURIComponent(filter_status);]]>
			</search>
			<add position="after" offset="2">
				<![CDATA[
				var is_voucher = {{ is_voucher }}
				
				if (is_voucher == 1) {
				url += '&is_voucher=1';
				}
				]]>
			</add>
		</operation>
	
	</file>
	<file path="admin/language/en-gb/catalog/product.php">
		<operation>
			<search>
				<![CDATA[$_['heading_title']          = 'Products';]]>
			</search>
			<add position="after">
				<![CDATA[ $_['voucher_heading_title']       = 'Vouchers'; ]]>
				<![CDATA[ $_['voucher_text_list']       = 'Voucher List'; ]]>
				<![CDATA[ $_['voucher_text_form']       = 'Edit Voucher'; ]]>
				<![CDATA[ $_['text_voucher_success']       = 'Success: You have modified vouchers!'; ]]>
				<![CDATA[ $_['entry_discount_type']       = 'Discount Type'; ]]>
				<![CDATA[ $_['error_discount_type']       = ''; ]]>
				<![CDATA[ $_['entry_discount']       = 'Discount'; ]]>
				<![CDATA[ $_['error_discount']       = ''; ]]>
				<![CDATA[ $_['entry_point_redeem']       = 'Point Redeem'; ]]>
				<![CDATA[ $_['error_point_redeem']       = ''; ]]>
				<![CDATA[ $_['entry_voucher_mapping']       = 'Voucher Mapping'; ]]>
				<![CDATA[ $_['error_voucher_mapping']       = ''; ]]>
			</add>
		</operation>
	</file>
	<file path="admin/model/marketing/coupon.php">
		<operation>
			<search>
				<![CDATA[public function getCouponProducts($coupon_id) {]]>
			</search>
			<add position="before">
				<![CDATA[
				public function getCouponByMapping($product_id){
				
					$query = $this->db->query("SELECT * FROM ". DB_PREFIX. "coupon WHERE mapping = '". (int)$product_id. "'");
					return $query->row;
				}

				public function getVoucherQuantity($voucher_id){
					$query = $this->db->query("SELECT COUNT(*) AS total FROM ". DB_PREFIX. "coupon WHERE voucher_id = '". $this->db->escape($voucher_id). "' AND (customer_id IS NULL OR customer_id = '0')");
					return $query->row['total'];	
				}
				
				public function getCouponSearch($data = array()) {
					$sql = "SELECT DISTINCT name, voucher_id, discount, type FROM " . DB_PREFIX . "coupon WHERE voucher_id IS NOT NULL";

					if (isset($data['filter_name'])) {
						$sql.= " AND (name LIKE '%". $this->db->escape($data['filter_name']). "%' OR voucher_id LIKE '%". $this->db->escape($data['filter_name']). "%')";
					}

					$sql .= " ORDER BY name ASC LIMIT 0, 5";

					$query = $this->db->query($sql);

					return $query->rows;
				}]]>
			</add>
		</operation>
	</file>
	
</modification>
